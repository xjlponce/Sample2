from flask import Flask, render_template, request, jsonify
from ultralytics import YOLO
import firebase_admin
from firebase_admin import credentials, db, storage
import os
import base64
import json
from datetime import datetime
import cv2
import numpy as np
import time

app = Flask(__name__)

PATIENT_DATA_DIR = 'patientData'
PATIENT_SEVERITY_FILE = 'patient_severity.json'

if not os.path.exists(PATIENT_DATA_DIR):
    os.makedirs(PATIENT_DATA_DIR)

# Firebase setup
cred = credentials.Certificate('test-b.json')
firebase_admin.initialize_app(cred, {
    'databaseURL': 'https://test-bafb0-default-rtdb.firebaseio.com/',
    'storageBucket': 'test-bafb0.appspot.com'
})

# Load patient severity data
if os.path.exists(PATIENT_SEVERITY_FILE):
    with open(PATIENT_SEVERITY_FILE, 'r') as f:
        patient_severity = json.load(f)
else:
    patient_severity = {}

def get_last_patient_number():
    patient_folders = sorted(
        [d for d in os.listdir(PATIENT_DATA_DIR) if os.path.isdir(os.path.join(PATIENT_DATA_DIR, d))],
        key=lambda x: int(x.split(' ')[-1]) if x.split(' ')[-1].isdigit() else 0
    )
    if not patient_folders:
        return 0
    last_patient = patient_folders[-1]
    last_patient_number = int(last_patient.split(' ')[-1])
    return last_patient_number

def is_image_blurred(image_path):
    image = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE)
    variance_of_laplacian = cv2.Laplacian(image, cv2.CV_64F).var()
    return variance_of_laplacian < 75  # Adjust threshold as necessary

@app.route('/')
def home():
    last_patient_number = get_last_patient_number()
    if last_patient_number == 0:
        last_patient = 'No Data Patient'
    else:
        last_patient = f'Patient No. {last_patient_number}'
    return render_template('index13.html', last_patient=last_patient)

@app.route('/add_patient', methods=['POST'], endpoint='add_patient')
def add_patient():
    last_patient_number = get_last_patient_number()
    new_patient_number = last_patient_number + 1
    new_patient_folder = f'Patient No. {new_patient_number}'
    os.makedirs(os.path.join(PATIENT_DATA_DIR, new_patient_folder))
    print(f"New patient folder created: {new_patient_folder}")
    return jsonify({'new_patient': new_patient_folder})

@app.route('/save_image', methods=['POST'], endpoint='save_image')
def save_image():
    data = request.json
    if not all(k in data for k in ('patient', 'image', 'area', 'image_type')):
        return jsonify({'status': 'failed', 'message': 'Missing required data'}), 400

    patient_folder = data['patient']
    image_data = data['image']
    area = data['area']
    image_type = data['image_type']

    # Determine the image file extension
    if image_type.lower() in ['jpeg', 'jpg']:
        file_extension = 'jpeg'
    elif image_type.lower() == 'png':
        file_extension = 'png'
    else:
        return jsonify({'status': 'failed', 'message': 'Unsupported image type'}), 400

    # Decode the image and save it to the patient folder
    image_path = os.path.join(PATIENT_DATA_DIR, patient_folder, f'{patient_folder}_{area}.{file_extension}')
    try:
        with open(image_path, 'wb') as image_file:
            image_file.write(base64.b64decode(image_data.split(',')[1]))
    except (IndexError, base64.binascii.Error) as e:
        return jsonify({'status': 'failed', 'message': 'Invalid image data'}), 400

    is_blurred = bool(is_image_blurred(image_path))  # Convert to standard Python boolean

    return jsonify({'status': 'success', 'area': area, 'is_blurred': is_blurred})

@app.route('/check_images/<patient>', endpoint='check_images')
def check_images(patient):
    patient_folder_path = os.path.join(PATIENT_DATA_DIR, patient)
    areas = ['Forehead', 'LeftCheeks', 'RightCheeks', 'Nose', 'Chin']
    existing_images = {}
    for area in areas:
        image_exists = any(os.path.exists(os.path.join(patient_folder_path, f'{patient}_{area}.{ext}')) for ext in ['jpeg', 'png'])
        existing_images[area] = image_exists
    return jsonify(existing_images)

def upload_folder_to_firebase(folder_path, storage_path):
    bucket = storage.bucket()
    for root, _, files in os.walk(folder_path):
        for file in files:
            local_file = os.path.join(root, file)
            blob = bucket.blob(f'{storage_path}/{file}')
            blob.upload_from_filename(local_file)

@app.route('/check_result_folder/<patient>', endpoint='check_result_folder')
def check_result_folder(patient):
    patient_folder_path = os.path.join(PATIENT_DATA_DIR, patient)
    result_folder_path = os.path.join(patient_folder_path, 'result')
    exists = os.path.exists(result_folder_path)
    return jsonify({'exists': exists})

@app.route('/confirm_add_patient', methods=['POST'], endpoint='confirm_add_patient')
def confirm_add_patient():
    return jsonify({'message': 'Do you want to add a new patient?'})

@app.route('/remove_image', methods=['POST'], endpoint='remove_image')
def remove_image():
    data = request.json
    patient_folder = data['patient']
    area = data['area']

    # Construct the image path
    image_path = os.path.join(PATIENT_DATA_DIR, patient_folder, f'{patient_folder}_{area}.jpeg')
    if os.path.exists(image_path):
        os.remove(image_path)
        return jsonify({'status': 'success', 'area': area})
    else:
        return jsonify({'status': 'failed', 'message': 'Image not found'})

@app.route('/save_results', methods=['POST'], endpoint='save_results')
def save_results():
    data = request.json
    patient = data['patient']
    patient_folder_path = data['patient_folder_path']
    result_folder_path = data['result_folder_path']
    results = data['results']
    severity = data['severity']
    recommended_treatment = data['recommended_treatment']
    total_score = data['total_score']

    # Load the YOLO model
    model = YOLO("best.pt")

    total_inference_time = 0
    inference_times = {}

    # Save the result images
    for area in results:
        image_path = os.path.join(patient_folder_path, f'{patient}_{area}.jpeg')
        if os.path.exists(image_path):
            start_time = time.time()
            result = model(image_path, conf=0.01)  # Set confidence threshold to 30%
            inference_time = time.time() - start_time
            inference_times[area] = inference_time
            total_inference_time += inference_time

            result_image_path = os.path.join(result_folder_path, f'{area}_result.jpg')
            result[0].save(filename=result_image_path)

    # Print the total inference time to the terminal
    print(f"Total inference time for {patient}: {total_inference_time:.2f} seconds")

    # Update Firebase and local patient severity record
    ref = db.reference('acnegrade')
    previous_severity = patient_severity.get(patient, None)
    if previous_severity:
        previous_count = ref.child(previous_severity).get() or 0
        ref.child(previous_severity).set(max(0, previous_count - 1))
    current_count = ref.child(severity).get() or 0
    ref.child(severity).set(current_count + 1)

    patient_severity[patient] = severity
    with open(PATIENT_SEVERITY_FILE, 'w') as f:
        json.dump(patient_severity, f)

    # Upload patient folder to Firebase storage
    upload_folder_to_firebase(patient_folder_path, f'patients/{patient}')

    # Add patient data to Firebase under patientData
    patient_number = int(patient.split(' ')[-1])
    patient_data_ref = db.reference(f'patientData/{patient_number}')
    now = datetime.now()
    date_str = now.strftime("%b-%d-%Y")
    time_str = now.strftime("%H:%M %p")
    patient_data_ref.set({
        'date': date_str,
        'severity': severity,
        'time': time_str
    })

    return jsonify({'status': 'success'})


@app.route('/analyze', methods=['POST'], endpoint='analyze')
def analyze():
    data = request.json
    patient = data['patient']
    patient_folder_path = os.path.join(PATIENT_DATA_DIR, patient)
    result_folder_path = os.path.join(patient_folder_path, 'result')

    if not os.path.exists(result_folder_path):
        os.makedirs(result_folder_path)

    # Load the YOLO model
    model = YOLO("best.pt")

    # Define the grading and factors
    grading = {
        'comedones': 1,
        'papules': 2,
        'pustules': 3,
        'nodules': 4
    }
    factors = {
        'Forehead': 2,
        'LeftCheeks': 2,
        'RightCheeks': 2,
        'Nose': 1,
        'Chin': 1
    }

    # Areas to check for images
    areas = ['Forehead', 'LeftCheeks', 'RightCheeks', 'Nose', 'Chin']
    total_score = 0
    area_scores = {}
    highest_lesion_type = None
    inference_times = {}
    total_inference_time = 0

    for area in areas:
        image_path = os.path.join(patient_folder_path, f'{patient}_{area}.jpeg')
        if os.path.exists(image_path):
            start_time = time.time()
            result = model(image_path, conf=0.01)  # Set confidence threshold to 30%
            inference_time = time.time() - start_time
            inference_times[area] = inference_time
            total_inference_time += inference_time

            highest_score = 0
            for cls in result[0].boxes.cls:
                lesion_type = model.names[int(cls)]
                if lesion_type in grading:
                    highest_score = max(highest_score, grading[lesion_type])
                    if not highest_lesion_type or grading[lesion_type] > grading[highest_lesion_type]:
                        highest_lesion_type = lesion_type
            area_score = highest_score * factors[area]
            total_score += area_score
            area_scores[area] = area_score
        else:
            area_scores[area] = 0

    # Print the total inference time to the terminal
    print(f"Total inference time for {patient}: {total_inference_time:.2f} seconds")

    # Determine severity and recommended treatment
    if total_score == 0:
        severity = "None"
        recommended_treatment = "No treatment required."
    elif 1 <= total_score <= 19:
        severity = "Mild"
        recommended_treatment = ("Comedones: Topical Retinoids and Salicylic Acid  <br> Papules: Topical Retinoids +/- BPO or Antibiotic and Azelaic Acid")
    elif 20 <= total_score <= 31:
        severity = "Moderate"
        recommended_treatment = ("Topical Retinoids +/- BPO or Azelaic Acid, Oral Antibiotics (ABO), "
                                 "Hormonal Therapy, Isotretonic")
    elif 32 <= total_score <= 40:
        severity = "Severe"
        recommended_treatment = ("Oral Isotretonin, Topical Antibiotics + Topical Retinoids + BPO, "
                                 "Hormonal Therapy + Topical Retinoids +/- BPO or Topical ABO")
    else:
        severity = "Severe"
        recommended_treatment = ("Oral Isotretonin, Topical Antibiotics + Topical Retinoids + BPO, "
                                 "Hormonal Therapy + Topical Retinoids +/- BPO or Topical ABO")

    result_data = {
        'status': 'success',
        'results': area_scores,
        'total_score': total_score,
        'severity': severity,
        'recommended_treatment': recommended_treatment,
        'inference_times': inference_times  # Include the inference times in the response
    }

    return jsonify(result_data)

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000, debug=True)





<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Acne Severity Grading</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #add8e6;
            display: flex;
            justify-content: center;
            align-items: flex-start;
            height: 100vh;
            margin: 0;
            overflow-y: auto;
        }

        .container {
            background-color: #e6e6fa;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
            text-align: center;
            width: 600px;
            margin-top: 20px;
        }

        .title {
            font-size: 24px;
            margin-bottom: 20px;
        }

        .button {
            margin: 10px 0;
            padding: 10px;
            border: none;
            border-radius: 5px;
            background-color: #add8e6;
            cursor: pointer;
            font-size: 16px;
            width: 180px;
        }

        .button:hover {
            background-color: #87cefa;
        }

        .capture-forehead-button,
        .capture-leftcheeks-button,
        .capture-rightcheeks-button,
        .capture-nose-button,
        .capture-chin-button {
            margin: 10px 0;
            padding: 10px;
            border: none;
            border-radius: 5px;
            background-color: #add8e6;
            cursor: pointer;
            font-size: 16px;
            width: 180px;
        }

        .capture-forehead-button:hover,
        .capture-leftcheeks-button:hover,
        .capture-rightcheeks-button:hover,
        .capture-nose-button:hover,
        .capture-chin-button:hover {
            background-color: #87cefa;
        }

        .remove-forehead-button,
        .remove-leftcheeks-button,
        .remove-rightcheeks-button,
        .remove-nose-button,
        .remove-chin-button {
            margin: 10px 0;
            padding: 10px;
            border: none;
            border-radius: 5px;
            background-color: #ffb6c1;
            cursor: pointer;
            font-size: 16px;
            width: 180px;
            margin-left: 10px;
        }

        .remove-forehead-button:hover,
        .remove-leftcheeks-button:hover,
        .remove-rightcheeks-button:hover,
        .remove-nose-button:hover,
        .remove-chin-button:hover {
            background-color: #ffa07a;
        }

        .analyze-button {
            margin: 10px 0;
            padding: 10px;
            border: none;
            border-radius: 5px;
            background-color: #90ee90;
            cursor: pointer;
            font-size: 16px;
            width: 180px;
        }

        .analyze-button:hover {
            background-color: #32cd32;
        }

        .add-patient-button {
            margin: 10px 0;
            padding: 10px;
            border: none;
            border-radius: 5px;
            background-color: #87cefa;
            cursor: pointer;
            font-size: 16px;
            width: 200px;
        }

        .add-patient-button:hover {
            background-color: #4682b4;
        }

        .section {
            margin: 10px 0;
        }

        .result {
            margin-top: 20px;
            font-size: 24px;
            background-color: #ffffff;
            padding: 20px;
            border-radius: 5px;
            box-shadow: 0 0 5px rgba(0, 0, 0, 0.1);
        }

        .severity {
            background-color: #ffeb3b;
            padding: 5px;
            border-radius: 5px;
            display: inline-block;
        }

        .flex-container {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin: 10px 0;
        }

        .flex-container label {
            flex: 1;
            text-align: left;
            margin-left: 5px;
        }

        .flex-container input {
            margin-right: 5px;
        }

        .modal {
            display: none;
            position: fixed;
            z-index: 1;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            overflow: auto;
            background-color: rgba(0, 0, 0, 0.4);
            justify-content: center;
            align-items: center;
        }

        .modal-content {
            background-color: #fefefe;
            margin: auto;
            padding: 20px;
            border: 1px solid #888;
            width: 80%;
            max-width: 800px;
            position: relative;
            text-align: center;
        }

        .close {
            color: #aaa;
            float: right;
            font-size: 28px;
            font-weight: bold;
        }

        .close:hover,
        .close:focus {
            color: black;
            text-decoration: none;
            cursor: pointer;
        }

        #camera {
            width: 100%;
            height: 500px;
            background-color: #ddd;
        }

        .capture-button {
            background-color: #4CAF50;
            border: none;
            color: white;
            padding: 15px 32px;
            text-align: center;
            text-decoration: none;
            display: inline-block;
            font-size: 16px;
            margin: 20px auto;
            cursor: pointer;
            border-radius: 10px;
            width: 540px;
        }

        .notification {
            display: none;
            position: fixed;
            bottom: 20px;
            left: 50%;
            transform: translateX(-50%);
            background-color: #4CAF50;
            color: white;
            padding: 15px;
            border-radius: 5px;
            z-index: 2;
        }

        .progress-container {
            display: none;
            width: 180px;
            background-color: #f3f3f3;
            margin: 10px auto;
        }

        .progress-bar {
            width: 0;
            height: 30px;
            background-color: #4CAF50;
            text-align: center;
            line-height: 30px;
            color: white;
        }

        .blur-message {
            margin-top: 10px;
            font-size: 18px;
            color: red;
            display: none;
        }

        .success-message {
            margin-top: 10px;
            font-size: 18px;
            color: green;
            display: none;
        }
        #capturedImage {
            display: block;
            margin: 0 auto;
        }
    </style>
</head>

<body>
    <div class="container">
        <div class="title">ACNE SEVERITY GRADING</div>
        <button class="add-patient-button" onclick="checkAddPatient()">ADD NEW PATIENT</button>
        <div class="section">
            <div class="flex-container">
                <input type="checkbox" id="forehead" disabled>
                <label for="forehead">Forehead</label>
                <button class="capture-forehead-button" onclick="capture('Forehead')">Forehead</button>
                <button class="remove-forehead-button" onclick="removeImage('Forehead')">Remove</button>
            </div>
            <div class="flex-container">
                <input type="checkbox" id="leftcheeks" disabled>
                <label for="leftcheeks">Left Cheeks</label>
                <button class="capture-leftcheeks-button" onclick="capture('LeftCheeks')">LeftCheeks</button>
                <button class="remove-leftcheeks-button" onclick="removeImage('LeftCheeks')">Remove</button>
            </div>
            <div class="flex-container">
                <input type="checkbox" id="rightcheeks" disabled>
                <label for="rightcheeks">Right Cheeks</label>
                <button class="capture-rightcheeks-button" onclick="capture('RightCheeks')">RightCheeks</button>
                <button class="remove-rightcheeks-button" onclick="removeImage('RightCheeks')">Remove</button>
            </div>
            <div class="flex-container">
                <input type="checkbox" id="nose" disabled>
                <label for="nose">Nose</label>
                <button class="capture-nose-button" onclick="capture('Nose')">Nose</button>
                <button class="remove-nose-button" onclick="removeImage('Nose')">Remove</button>
            </div>
            <div class="flex-container">
                <input type="checkbox" id="chin" disabled>
                <label for="chin">Chin</label>
                <button class="capture-chin-button" onclick="capture('Chin')">Chin</button>
                <button class="remove-chin-button" onclick="removeImage('Chin')">Remove</button>
            </div>
        </div>
        <button class="analyze-button" onclick="analyze()">ANALYZE</button>
        <!-- Progress bar -->
        <div class="progress-container" id="progressContainer">
            <div class="progress-bar" id="progressBar">Analyzing...</div>
        </div>
        <div class="result">
            Analysis Result <br><span id="lastPatient">{{ last_patient }}</span><br>
            <span id="analyzeResult"></span>
        </div>
    </div>

    <!-- Modal for camera -->
    <div id="cameraModal" class="modal">
        <div class="modal-content">
            <span class="close">&times;</span>
            <h2 id="cameraLabel"></h2>
            <video id="camera" autoplay></video>
            <img id="capturedImage" style="display: none;">
            <button class="capture-button" onclick="captureImage()">Capture</button>
            <div class="blur-message" id="blurMessage">The captured image is blurred. Please retake the photo.</div>
            <div class="success-message" id="successMessage">The captured image is clear.</div>
        </div>
    </div>

    <!-- Notification -->
    <div id="notification" class="notification">
        Image successfully captured!
    </div>

    <script>
        let currentArea = '';

        document.querySelectorAll('.capture-forehead-button, .capture-leftcheeks-button, .capture-rightcheeks-button, .capture-nose-button, .capture-chin-button').forEach(button => {
            button.addEventListener('click', event => {
                currentArea = event.target.innerText.split(' ')[0]; // Update current area based on the button text
                document.getElementById('cameraLabel').innerText = currentArea.replace(/(^\w|\s\w)/g, m => m.toUpperCase());
                document.getElementById('cameraModal').style.display = 'flex';
                startCamera();
            });
        });

        document.querySelector('.close').addEventListener('click', () => {
            document.getElementById('cameraModal').style.display = 'none';
            stopCamera();
        });

        const video = document.getElementById('camera');
        const img = document.getElementById('capturedImage');
        const blurMessage = document.getElementById('blurMessage');
        const successMessage = document.getElementById('successMessage');
        let stream;

        function startCamera() {
            navigator.mediaDevices.getUserMedia({ video: true })
                .then(s => {
                    stream = s;
                    video.style.display = 'block';
                    img.style.display = 'none';
                    blurMessage.style.display = 'none';
                    successMessage.style.display = 'none';
                    video.srcObject = stream;
                })
                .catch(err => {
                    console.error("Error accessing camera: ", err);
                });
        }

        function stopCamera() {
            if (stream) {
                stream.getTracks().forEach(track => track.stop());
            }
        }

        function captureImage() {
            const canvas = document.createElement('canvas');
            canvas.width = video.videoWidth;
            canvas.height = video.videoHeight;
            const context = canvas.getContext('2d');
            context.drawImage(video, 0, 0, canvas.width, canvas.height);
            const imageData = canvas.toDataURL('image/jpeg');

            img.src = imageData;
            img.style.display = 'block';
            video.style.display = 'none';
            stopCamera();

            const patient = document.getElementById('lastPatient').innerText;
            if (patient === 'No Data Patient') {
                alert('Please add a new patient first.');
                return;
            }

            fetch('/save_image', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    patient: patient,
                    image: imageData,
                    area: currentArea,
                    image_type: 'jpeg'
                })
            })
                .then(response => response.json())
                .then(data => {
                    if (data.status === 'success') {
                        if (data.is_blurred) {
                            blurMessage.style.display = 'block';
                            successMessage.style.display = 'none';
                        } else {
                            blurMessage.style.display = 'none';
                            successMessage.style.display = 'block';
                            document.getElementById(currentArea.toLowerCase()).checked = true;
                            showNotification();
                        }
                    }
                });
        }

        function capture(area) {
            currentArea = area;
            document.getElementById('cameraLabel').innerText = area.replace(/(^\w|\s\w)/g, m => m.toUpperCase());
            document.getElementById('cameraModal').style.display = 'flex';
            startCamera();
        }

        function removeImage(area) {
            const confirmDeletion = confirm(`Do you want to delete the image for ${area}?`);
            if (!confirmDeletion) {
                return;
            }

            const patient = document.getElementById('lastPatient').innerText;
            if (patient === 'No Data Patient') {
                alert('No patient data to remove.');
                return;
            }

            fetch('/remove_image', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    patient: patient,
                    area: area
                })
            })
                .then(response => response.json())
                .then(data => {
                    if (data.status === 'success') {
                        document.getElementById(area.toLowerCase()).checked = false;
                        alert('Image removed successfully!');
                    } else {
                        alert('Failed to remove image.');
                    }
                });
        }

        function showNotification() {
            const notification = document.getElementById('notification');
            notification.style.display = 'block';
            setTimeout(() => {
                notification.style.display = 'none';
            }, 3000);
        }

        function addPatient() {
            fetch('/add_patient', { method: 'POST' })
                .then(response => response.json())
                .then(data => {
                    document.getElementById('lastPatient').innerText = data.new_patient;
                    document.getElementById('analyzeResult').innerText = '';
                    checkImages(data.new_patient);
                });
        }

        function checkAddPatient() {
            fetch('/confirm_add_patient', { method: 'POST' })
                .then(response => response.json())
                .then(data => {
                    const addPatientConfirmation = confirm(data.message);
                    if (addPatientConfirmation) {
                        addPatient();
                    }
                });
        }

        function checkImages(patient) {
            fetch(`/check_images/${patient}`)
                .then(response => response.json())
                .then(data => {
                    for (const area in data) {
                        document.getElementById(area.toLowerCase()).checked = data[area];
                    }
                });
        }

        function analyze() {
            const patient = document.getElementById('lastPatient').innerText;
            if (patient === 'No Data Patient') {
                alert('Please add a new patient first.');
                return;
            }

            fetch(`/check_result_folder/${patient}`)
                .then(response => response.json())
                .then(data => {
                    if (data.exists) {
                        const overwrite = confirm("The analysis result already exists. Do you want to overwrite it?");
                        if (!overwrite) {
                            return;
                        }
                    }

                    document.getElementById('progressContainer').style.display = 'block';
                    document.getElementById('progressBar').style.width = '50%';

                    fetch('/analyze', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            patient: patient
                        })
                    })
                        .then(response => response.json())
                        .then(data => {
                            document.getElementById('progressContainer').style.display = 'none';
                            document.getElementById('progressBar').style.width = '0%';

                            if (data.status === 'success') {
                                let resultText = `Severity: <span class="severity">${data.severity}</span><br>Recommended Treatment: ${data.recommended_treatment}<br> Locations and Score: <br>`;
                                for (const [area, score] of Object.entries(data.results)) {
                                    resultText += `${area}: ${score}<br>`;
                                }
                                document.getElementById('analyzeResult').innerHTML = resultText;
                                document.getElementById('lastPatient').innerText = `Patient No. ${patient.replace('Patient No. ', '')}`;

                                const saveResults = confirm("Do you want to save these results?");
                                if (saveResults) {
                                    saveAnalysisResults(patient, data);
                                }
                            }
                        })
                        .catch(error => {
                            document.getElementById('progressContainer').style.display = 'none';
                            document.getElementById('progressBar').style.width = '0%';
                            console.error('Error:', error);
                        });
                });
        }

        function saveAnalysisResults(patient, data) {
            const patient_folder_path = `patientData/${patient}`;
            const result_folder_path = `${patient_folder_path}/result`;

            fetch(`/save_results`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    patient: patient,
                    results: data.results,
                    severity: data.severity,
                    recommended_treatment: data.recommended_treatment,
                    total_score: data.total_score,
                    patient_folder_path: patient_folder_path,
                    result_folder_path: result_folder_path
                })
            })
                .then(response => response.json())
                .then(data => {
                    if (data.status === 'success') {
                        alert('Results saved successfully!');
                    } else {
                        alert('Failed to save results.');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                });
        }

        window.onload = () => {
            const lastPatient = document.getElementById('lastPatient').innerText;
            if (lastPatient !== 'No Data Patient') {
                checkImages(lastPatient);
            }
        };

        function isImageBlurred(context, width, height) {
            const imageData = context.getImageData(0, 0, width, height);
            const data = imageData.data;
            let gray = [];

            for (let i = 0; i < data.length; i += 4) {
                const avg = (data[i] + data[i + 1] + data[i + 2]) / 3;
                gray.push(avg);
            }

            let variance = 0;
            const mean = gray.reduce((a, b) => a + b) / gray.length;
            gray.forEach(value => {
                variance += (value - mean) ** 2;
            });

            variance /= gray.length;

            return variance < 75; // Adjust threshold as necessary
        }
    </script>
</body>

</html>
